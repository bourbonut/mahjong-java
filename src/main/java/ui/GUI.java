package ui;

import game.Game;
import game.Board;
import game.Tile;
import game.Vec2D;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.InputStream;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;

public class GUI extends javax.swing.JPanel {

    Game game;
    int difficulty;

    Image images[];
    Vec2D imgScale; // Update by the display method of the board (see UI designer)

    Vec2D selection;
    boolean noSolution;
    Vec2D[] hint;

    public static void main(String[] args) {
        try {
            javax.swing.UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
        } catch (ClassNotFoundException e) {
        } catch (InstantiationException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        JFrame window = new JFrame("Majhong");
        window.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        // frame.setSize(1920, 1080);
        window.setVisible(true);
        GUI gui = new GUI();
        window.add(gui);
        window.pack();
    }

    public GUI() {
        noSolution = false;

        difficulty = 1; // default game parameter
        this.game = new Game(this.difficulty);

        // load all images once
        Tile[] tuiles = Tile.all();
        images = new Image[tuiles.length];

        for (int i = 0; i < tuiles.length; i++) {
            // Try to load the corresponding tile
            try {
                InputStream is = GUI.class.getResourceAsStream("/image/" + this.fileFor(tuiles[i]) + ".png");
                images[i] = ImageIO.read(is);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        initComponents();

        // The option of the interface must match the one used by the generation
        difficultyChooser.setSelectedIndex(difficulty);
        gameDisplayUpdate();
    }

    private void gameDisplayUpdate() {
        revertLabel.setText("Left moves in memory: " + game.getHistorySize());
        hintLabel.setText("Left hints: " + game.getAvailableHints());
        canvas.repaint();
    }

    // Gives a name of the file corresponding to the specified tile
    private String fileFor(Tile t) {
        String str = t.type + "" + (int) t.id;
        String image = null;
        switch (str.charAt(0)) {
            case 'R':
                image = "caractere" + str.substring(1);
                break;
            case 'B':
                image = "bambou" + str.substring(1);
                break;
            case 'C':
                image = "cercle" + str.substring(1);
                break;
            case 'V':
                image = "vent" + str.substring(1);
                break;
            case 'D':
                image = "dragon" + str.substring(1);
                break;
            case 'F':
                image = "fleur" + str.substring(1);
                break;
            case 'S':
                image = "saison" + str.substring(1);
                break;
        }
        return image;
    }

    Image imageFor(Tile t) {
        return images[t.dispoIndex()];
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new javax.swing.JTabbedPane();
        gameMenu = new javax.swing.JPanel();
        hintButton = new javax.swing.JButton();
        hintLabel = new javax.swing.JLabel();
        revertButton = new javax.swing.JButton();
        revertLabel = new javax.swing.JLabel();
        startMenu = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        difficultyChooser = new javax.swing.JComboBox<>();
        generationButton = new javax.swing.JButton();
        cheatMode = new javax.swing.JCheckBox();
        fileMenu = new javax.swing.JPanel();
        loadButton = new javax.swing.JButton();
        saveButton = new javax.swing.JButton();
        menuLabel = new javax.swing.JLabel();
        canvas = new javax.swing.JPanel() {

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                // to edit this code, UI designer > JPanel > customize-code 

                Board p = game.getPlateau();
                int iWidth = images[0].getWidth(null);
                int iHeight = images[0].getHeight(null);
                Dimension dim = this.getSize();
                int size = p.getSize();
                imgScale = new Vec2D(dim.width / size, dim.height / size);
                // int xincr = dim.width/size;
                // int yincr = dim.height/size;

                for (int l = 1; l <= size; l++) {
                    for (int c = 1; c <= size; c++) {
                        Tile t = p.getCase(new Vec2D(l, c));
                        if (!t.free()) {
                            g.drawImage(imageFor(t), (c - 1) * imgScale.x, (l - 1) * imgScale.y, (c) * imgScale.x,
                                    (l) * imgScale.y, 0, 0, iWidth, iHeight, null);
                        }
                    }
                }

                if (selection != null) {
                    g.setColor(new Color(0.9f, 0.2f, 0.1f));
                    g.drawRoundRect((selection.y - 1) * imgScale.x, (selection.x - 1) * imgScale.y, imgScale.x,
                            imgScale.y, 2, 5);
                    g.setColor(new Color(0.8f, 0.3f, 0.1f));
                    g.drawRoundRect((selection.y - 1) * imgScale.x - 1, (selection.x - 1) * imgScale.y - 1,
                            imgScale.x + 2, imgScale.y + 2, 3, 6);
                }

                g.setFont(new Font("Dialog", Font.PLAIN, 18));
                if (noSolution) {
                    g.setColor(new Color(0f, 0f, 0f, 0.2f));
                    g.fillRect(30, dim.height / 2, dim.width - 60, 60);

                    g.setColor(new Color(0.8f, 0.2f, 0f));
                    g.drawRect(30, dim.height / 2, dim.width - 60, 60);

                    g.drawString("No solution", dim.width / 2 - 80, dim.height / 2 + 40);
                }

                if (game.finished()) {
                    g.setColor(new Color(0f, 0f, 0f, 0.2f));
                    g.fillRect(30, dim.height / 2, dim.width - 60, 60);

                    g.setColor(new Color(0.9f, 0.2f, 0.1f));
                    g.drawRect(30, dim.height / 2, dim.width - 60, 60);

                    g.drawString("Finished game", dim.width / 2 - 80, dim.height / 2 + 40);
                }

                if (hint != null) {
                    g.setColor(new Color(1f, 1f, 0.2f));
                    g.drawRoundRect((hint[0].y - 1) * imgScale.x, (hint[0].x - 1) * imgScale.y, imgScale.x, imgScale.y,
                            2, 5);
                    g.drawRoundRect((hint[1].y - 1) * imgScale.x, (hint[1].x - 1) * imgScale.y, imgScale.x, imgScale.y,
                            2, 5);
                }
            }
        };
        jSeparator1 = new javax.swing.JSeparator();

        hintButton.setText("Hint");
        hintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hintButtonActionPerformed(evt);
            }
        });

        hintLabel.setText("Left hints: 0");

        revertButton.setText("Cancel the last move");
        revertButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                revertButtonActionPerformed(evt);
            }
        });

        revertLabel.setText("Moves in memory: 0");

        javax.swing.GroupLayout gameMenuLayout = new javax.swing.GroupLayout(gameMenu);
        gameMenu.setLayout(gameMenuLayout);
        gameMenuLayout.setHorizontalGroup(gameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(gameMenuLayout.createSequentialGroup().addContainerGap().addGroup(gameMenuLayout
                        .createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(gameMenuLayout.createSequentialGroup()
                                .addComponent(revertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 128,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(revertLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                        .addGroup(gameMenuLayout.createSequentialGroup()
                                .addComponent(hintButton, javax.swing.GroupLayout.DEFAULT_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hintLabel)))
                        .addContainerGap()));
        gameMenuLayout.setVerticalGroup(gameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(gameMenuLayout.createSequentialGroup().addContainerGap()
                        .addGroup(gameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(hintButton).addComponent(hintLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(gameMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(revertButton, javax.swing.GroupLayout.PREFERRED_SIZE, 26,
                                        javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(revertLabel))
                        .addContainerGap()));

        menu.addTab("Game menu", gameMenu);

        jLabel2.setText("Generation of a new board");

        difficultyChooser.setModel(
                new javax.swing.DefaultComboBoxModel<>(new String[] { "Impossible (random)", "Hard", "Normal" }));
        difficultyChooser.setSelectedIndex(1);
        difficultyChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                difficultyChooserActionPerformed(evt);
            }
        });

        generationButton.setText("generer");
        generationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generationButtonActionPerformed(evt);
            }
        });

        cheatMode.setText("Cheatmode");
        cheatMode.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cheatModeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout startMenuLayout = new javax.swing.GroupLayout(startMenu);
        startMenu.setLayout(startMenuLayout);
        startMenuLayout
                .setHorizontalGroup(startMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(startMenuLayout.createSequentialGroup()
                                .addGroup(startMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(startMenuLayout.createSequentialGroup().addGap(69, 69, 69)
                                                .addComponent(difficultyChooser, 0, 251, Short.MAX_VALUE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(generationButton))
                                        .addGroup(startMenuLayout.createSequentialGroup().addContainerGap()
                                                .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE,
                                                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                .addContainerGap())
                        .addGroup(startMenuLayout.createSequentialGroup().addGap(91, 91, 91).addComponent(cheatMode)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        startMenuLayout.setVerticalGroup(startMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(startMenuLayout.createSequentialGroup().addContainerGap().addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(startMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(difficultyChooser, javax.swing.GroupLayout.PREFERRED_SIZE,
                                        javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(generationButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cheatMode).addContainerGap()));

        difficultyChooser.getAccessibleContext().setAccessibleName("difficultyChooser");

        menu.addTab("Start", startMenu);

        loadButton.setText("Load");
        loadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout fileMenuLayout = new javax.swing.GroupLayout(fileMenu);
        fileMenu.setLayout(fileMenuLayout);
        fileMenuLayout.setHorizontalGroup(fileMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileMenuLayout.createSequentialGroup().addGap(106, 106, 106).addComponent(loadButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(saveButton)
                        .addContainerGap(161, Short.MAX_VALUE)));
        fileMenuLayout.setVerticalGroup(fileMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(fileMenuLayout.createSequentialGroup().addContainerGap()
                        .addGroup(fileMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(loadButton).addComponent(saveButton))
                        .addContainerGap(52, Short.MAX_VALUE)));

        menu.addTab("File", fileMenu);

        menuLabel.setFont(new java.awt.Font("Sans Serif", 1, 10)); // NOI18N
        menuLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        menuLabel.setText("- MAJHONG -");
        menuLabel.setVerticalAlignment(javax.swing.SwingConstants.TOP);
        menuLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                canvasMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout canvasLayout = new javax.swing.GroupLayout(canvas);
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 0, Short.MAX_VALUE));
        canvasLayout.setVerticalGroup(canvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGap(0, 473, Short.MAX_VALUE));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(menu, javax.swing.GroupLayout.Alignment.TRAILING)
                .addComponent(canvas, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1).addComponent(menuLabel, javax.swing.GroupLayout.DEFAULT_SIZE,
                        javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(canvas, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE,
                                javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(menuLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(menu,
                                javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE,
                                javax.swing.GroupLayout.PREFERRED_SIZE)));

        menu.getAccessibleContext().setAccessibleName("menu");
    }// </editor-fold>//GEN-END:initComponents

    private void hintButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_hintButtonActionPerformed
        this.hint = game.hint();
        // if (this.hint == null) //this.noSolution = true;
        gameDisplayUpdate();
    }// GEN-LAST:event_hintButtonActionPerformed

    private void difficultyChooserActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_difficultyChooserActionPerformed
        this.difficulty = (int) ((JComboBox) evt.getSource()).getSelectedIndex();
    }// GEN-LAST:event_difficultyChooserActionPerformed

    private void generationButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_generationButtonActionPerformed
        this.game = new Game(this.difficulty);
        gameDisplayUpdate();
    }// GEN-LAST:event_generationButtonActionPerformed

    private void loadButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_loadButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int choosen = chooser.showOpenDialog(this);
        if (choosen == JFileChooser.APPROVE_OPTION) {
            String name = chooser.getSelectedFile().getAbsolutePath();
            System.out.println("load file \"" + name + "\"");
            this.game = new Game(name);
            gameDisplayUpdate();
        }
    }// GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int choosen = chooser.showOpenDialog(this);
        if (choosen == JFileChooser.APPROVE_OPTION) {
            String name = chooser.getSelectedFile().getAbsolutePath();
            System.out.println("save file \"" + name + "\"");
            this.game.save(name);
        }
    }// GEN-LAST:event_saveButtonActionPerformed

    private void canvasMouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_canvasMouseClicked
        // Left click: select
        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (selection == null)
                selection = new Vec2D(evt.getY() / imgScale.y + 1, evt.getX() / imgScale.x + 1);
            else {
                Vec2D second = new Vec2D(evt.getY() / imgScale.y + 1, evt.getX() / imgScale.x + 1);
                game.merge(selection, second);
                selection = null;
            }
        }
        // Right click: unselect
        else if (evt.getButton() == MouseEvent.BUTTON3)
            selection = null;
        // Update display
        gameDisplayUpdate();
    }// GEN-LAST:event_canvasMouseClicked

    private void revertButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_revertButtonActionPerformed
        game.revert(1);
        gameDisplayUpdate();
    }// GEN-LAST:event_revertButtonActionPerformed

    private void cheatModeActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cheatModeActionPerformed
        game.setCheatMode(cheatMode.isSelected());
    }// GEN-LAST:event_cheatModeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvas;
    private javax.swing.JCheckBox cheatMode;
    private javax.swing.JComboBox<String> difficultyChooser;
    private javax.swing.JPanel fileMenu;
    private javax.swing.JPanel gameMenu;
    private javax.swing.JButton generationButton;
    private javax.swing.JButton hintButton;
    private javax.swing.JLabel hintLabel;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton loadButton;
    private javax.swing.JTabbedPane menu;
    private javax.swing.JLabel menuLabel;
    private javax.swing.JButton revertButton;
    private javax.swing.JLabel revertLabel;
    private javax.swing.JButton saveButton;
    private javax.swing.JPanel startMenu;
    // End of variables declaration//GEN-END:variables
}
