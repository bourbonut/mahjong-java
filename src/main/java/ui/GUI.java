package ui;

import game.Game;
import game.Board;
import game.Tile;
import game.Vec2D;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.io.InputStream;
import java.util.HashMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSeparator;
import javax.swing.JTabbedPane;
import javax.swing.LayoutStyle;
import javax.swing.SwingConstants;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.WindowConstants;

public class GUI extends JPanel {

    static int IMG_WIDTH = 50;
    static int IMG_HEIGHT = 70;
    static int BOARD_SIZE = 12;
    static Vec2D MAX_IMG_SCALE = new Vec2D(IMG_WIDTH, IMG_HEIGHT);
    Game game;
    int difficulty;

    Image images[];
    Vec2D imgScale; // Update by the display method of the board (see UI designer)
    Vec2D offset; // Update when resizing the screen

    Vec2D selection;
    boolean noSolution;
    Vec2D[] hint;

    static HashMap<Character, String> IMAGE_FROM_TYPE = new HashMap<>() {
        {
            put('R', "caractere"); // character
            put('B', "bambou"); // bamboo
            put('C', "cercle"); // circle
            put('V', "vent"); // wind
            put('D', "dragon"); // dragon
            put('F', "fleur"); // flower
            put('S', "saison"); // season
        }
    };

    public static void main(String[] args) {
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.gtk.GTKLookAndFeel");
        } catch (ClassNotFoundException e) {
        } catch (InstantiationException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
        }

        JFrame window = new JFrame("Mahjong");
        window.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        window.setVisible(true);
        GUI gui = new GUI();
        window.add(gui);
        window.pack();
    }

    public GUI() {
        noSolution = false;

        difficulty = 1; // default game parameter
        this.game = new Game(this.difficulty);

        // load all images once
        Tile[] tiles = Tile.all();
        images = new Image[tiles.length];

        for (int i = 0; i < tiles.length; i++) {
            // Try to load the corresponding tile
            try {
                InputStream is = GUI.class.getResourceAsStream(String.format("/image/%s.png", this.fileFor(tiles[i])));
                images[i] = ImageIO.read(is);
            } catch (IOException ex) {
                Logger.getLogger(GUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        initComponents();

        // The option of the interface must match the one used by the generation
        difficultyChooser.setSelectedIndex(difficulty);
        gameDisplayUpdate();
    }

    private void gameDisplayUpdate() {
        revertLabel.setText(String.format("Left moves in memory: %d", game.getHistorySize()));
        hintLabel.setText(String.format("Left hints: %d", game.getAvailableHints()));
        canvas.repaint();
    }

    // Gives a name of the file corresponding to the specified tile
    private String fileFor(Tile tile) {
        return IMAGE_FROM_TYPE.get(tile.type) + (int) tile.id;
    }

    Image imageFor(Tile tile) {
        return images[tile.dispoIndex()];
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menu = new JTabbedPane();
        gameMenu = new JPanel();
        hintButton = new JButton();
        hintLabel = new JLabel();
        revertButton = new JButton();
        revertLabel = new JLabel();
        startMenu = new JPanel();
        jLabel2 = new JLabel();
        difficultyChooser = new JComboBox<>();
        generationButton = new JButton();
        cheatMode = new JCheckBox();
        fileMenu = new JPanel();
        loadButton = new JButton();
        saveButton = new JButton();
        menuLabel = new JLabel();
        canvas = new JPanel() {

            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);

                // In *Netbeans* software, to edit this code:
                // UI designer > JPanel > customize-code

                Board board = game.getBoard();
                Dimension dim = this.getSize();

                // For dynamic resizing, count the number of times a tile can be placed on the
                // limited screen size. Then it computes the image scale given this number.
                int qW = dim.width / BOARD_SIZE;
                int qH = dim.height / BOARD_SIZE;
                boolean cW = ((qW * IMG_HEIGHT / IMG_WIDTH) * BOARD_SIZE) <= dim.width;
                boolean cH = ((qH * IMG_WIDTH / IMG_HEIGHT) * BOARD_SIZE) <= dim.height;
                int q = cW && cH ? Math.min(qW, qH) : cH ? qH : qW;
                imgScale = new Vec2D(
                    Math.min(q == qW ? qW: qH * IMG_WIDTH / IMG_HEIGHT, MAX_IMG_SCALE.x),
                    Math.min(q == qH ? qH: qW * IMG_HEIGHT / IMG_WIDTH, MAX_IMG_SCALE.y)
                );
                offset = new Vec2D(
                    (dim.width - imgScale.x * BOARD_SIZE) / 2,
                    (dim.height - imgScale.y * BOARD_SIZE) / 2
                );
                for (int row = 1; row <= BOARD_SIZE; row++) {
                    for (int col = 1; col <= BOARD_SIZE; col++) {
                        Tile tile = board.getCase(new Vec2D(row, col));
                        if (!tile.free()) {
                            g.drawImage(imageFor(tile), (col - 1) * imgScale.x + offset.x, (row - 1) * imgScale.y + offset.y,
                                    col * imgScale.x + offset.x, row * imgScale.y + offset.y, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
                        }
                    }
                }

                if (selection != null) {
                    g.setColor(new Color(0.9f, 0.2f, 0.1f));
                    g.drawRoundRect((selection.y - 1) * imgScale.x + offset.x, (selection.x - 1) * imgScale.y + offset.y, imgScale.x,
                            imgScale.y, 2, 5);
                    g.setColor(new Color(0.8f, 0.3f, 0.1f));
                    g.drawRoundRect((selection.y - 1) * imgScale.x + offset.x - 1, (selection.x - 1) * imgScale.y + offset.y - 1,
                            imgScale.x + 2, imgScale.y + 2, 3, 6);
                }

                g.setFont(new Font("Dialog", Font.PLAIN, 18));
                if (noSolution) {
                    g.setColor(new Color(0f, 0f, 0f, 0.2f));
                    g.fillRect(30, dim.height / 2, dim.width - 60, 60);

                    g.setColor(new Color(0.8f, 0.2f, 0f));
                    g.drawRect(30, dim.height / 2, dim.width - 60, 60);

                    g.drawString("No solution", dim.width / 2 - 80, dim.height / 2 + 40);
                }

                if (game.finished()) {
                    g.setColor(new Color(0f, 0f, 0f, 0.2f));
                    g.fillRect(30, dim.height / 2, dim.width - 60, 60);

                    g.setColor(new Color(0.9f, 0.2f, 0.1f));
                    g.drawRect(30, dim.height / 2, dim.width - 60, 60);

                    g.drawString("Finished game", dim.width / 2 - 80, dim.height / 2 + 40);
                }

                if (hint != null) {
                    g.setColor(new Color(1f, 1f, 0.2f));
                    g.drawRoundRect((hint[0].y - 1) * imgScale.x + offset.x, (hint[0].x - 1) * imgScale.y + offset.y, imgScale.x, imgScale.y,
                            2, 5);
                    g.drawRoundRect((hint[1].y - 1) * imgScale.x + offset.x, (hint[1].x - 1) * imgScale.y + offset.y, imgScale.x, imgScale.y,
                            2, 5);
                }
            }
        };

        jSeparator1 = new JSeparator();

        hintButton.setText("Hint");
        hintButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                hintButtonActionPerformed(evt);
            }
        });

        hintLabel.setText("Left hints: 0");

        revertButton.setText("Cancel the last move");
        revertButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                revertButtonActionPerformed(evt);
            }
        });

        revertLabel.setText("Moves in memory: 0");

        GroupLayout gameMenuLayout = new GroupLayout(gameMenu);
        gameMenu.setLayout(gameMenuLayout);
        gameMenuLayout.setHorizontalGroup(gameMenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(gameMenuLayout.createSequentialGroup().addContainerGap().addGroup(gameMenuLayout
                        .createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(gameMenuLayout.createSequentialGroup()
                                .addComponent(revertButton, GroupLayout.PREFERRED_SIZE, 178, GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(revertLabel, GroupLayout.DEFAULT_SIZE, 198, Short.MAX_VALUE))
                        .addGroup(gameMenuLayout.createSequentialGroup()
                                .addComponent(hintButton, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(hintLabel)))
                        .addContainerGap()));
        gameMenuLayout
                .setVerticalGroup(gameMenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(gameMenuLayout.createSequentialGroup().addContainerGap()
                                .addGroup(gameMenuLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(hintButton).addComponent(hintLabel))
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE,
                                        Short.MAX_VALUE)
                                .addGroup(gameMenuLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                        .addComponent(revertButton, GroupLayout.PREFERRED_SIZE, 26,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addComponent(revertLabel))
                                .addContainerGap()));

        menu.addTab("Game menu", gameMenu);

        jLabel2.setText("Generation of a new board");

        difficultyChooser
                .setModel(new DefaultComboBoxModel<>(new String[] { "Impossible (random)", "Hard", "Normal" }));
        difficultyChooser.setSelectedIndex(1);
        difficultyChooser.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                difficultyChooserActionPerformed(evt);
            }
        });

        generationButton.setText("Generate");
        generationButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                generationButtonActionPerformed(evt);
            }
        });

        cheatMode.setText("Cheatmode");
        cheatMode.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                cheatModeActionPerformed(evt);
            }
        });

        GroupLayout startMenuLayout = new GroupLayout(startMenu);
        startMenu.setLayout(startMenuLayout);
        startMenuLayout.setHorizontalGroup(startMenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(startMenuLayout.createSequentialGroup().addGroup(startMenuLayout
                        .createParallelGroup(GroupLayout.Alignment.LEADING)
                        .addGroup(startMenuLayout.createSequentialGroup().addGap(69, 69, 69)
                                .addComponent(difficultyChooser, 0, 251, Short.MAX_VALUE)
                                .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(generationButton))
                        .addGroup(startMenuLayout.createSequentialGroup().addContainerGap().addComponent(jLabel2,
                                GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addContainerGap())
                .addGroup(startMenuLayout.createSequentialGroup().addGap(91, 91, 91).addComponent(cheatMode)
                        .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        startMenuLayout.setVerticalGroup(startMenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(startMenuLayout.createSequentialGroup().addContainerGap().addComponent(jLabel2)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(startMenuLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(difficultyChooser, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                        GroupLayout.PREFERRED_SIZE)
                                .addComponent(generationButton))
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE,
                                Short.MAX_VALUE)
                        .addComponent(cheatMode).addContainerGap()));

        difficultyChooser.getAccessibleContext().setAccessibleName("difficultyChooser");

        menu.addTab("Start", startMenu);

        loadButton.setText("Load");
        loadButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                loadButtonActionPerformed(evt);
            }
        });

        saveButton.setText("Save");
        saveButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        GroupLayout fileMenuLayout = new GroupLayout(fileMenu);
        fileMenu.setLayout(fileMenuLayout);
        fileMenuLayout.setHorizontalGroup(fileMenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(fileMenuLayout.createSequentialGroup().addGap(106, 106, 106).addComponent(loadButton)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(saveButton)
                        .addContainerGap(161, Short.MAX_VALUE)));
        fileMenuLayout.setVerticalGroup(fileMenuLayout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(fileMenuLayout.createSequentialGroup().addContainerGap()
                        .addGroup(fileMenuLayout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                                .addComponent(loadButton).addComponent(saveButton))
                        .addContainerGap(52, Short.MAX_VALUE)));

        menu.addTab("File", fileMenu);

        menuLabel.setFont(new java.awt.Font("Sans Serif", 1, 10)); // NOI18N
        menuLabel.setHorizontalAlignment(SwingConstants.CENTER);
        menuLabel.setText("- MAHJONG -");
        menuLabel.setVerticalAlignment(SwingConstants.TOP);
        menuLabel.setHorizontalTextPosition(SwingConstants.CENTER);

        canvas.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                canvasMouseClicked(evt);
            }
        });

        GroupLayout canvasLayout = new GroupLayout(canvas);
        int totalImageWidth = 3 * IMG_WIDTH * BOARD_SIZE / 4; // must be greater or equal to 427, due to layout
        int totalImageHeight = 3 * IMG_HEIGHT * BOARD_SIZE / 4;
        canvas.setLayout(canvasLayout);
        canvasLayout.setHorizontalGroup(
                canvasLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, totalImageWidth, Short.MAX_VALUE));
        canvasLayout.setVerticalGroup(
                canvasLayout.createParallelGroup(GroupLayout.Alignment.LEADING).addGap(0, totalImageHeight, Short.MAX_VALUE));

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addComponent(menu, GroupLayout.Alignment.TRAILING)
                .addComponent(canvas, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE,
                        GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jSeparator1)
                .addComponent(menuLabel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(canvas, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(menuLabel)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED).addComponent(menu,
                                GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)));

        menu.getAccessibleContext().setAccessibleName("menu");
    }// </editor-fold>//GEN-END:initComponents

    private void hintButtonActionPerformed(ActionEvent evt) {// GEN-FIRST:event_hintButtonActionPerformed
        this.hint = game.hint();
        gameDisplayUpdate();
    }// GEN-LAST:event_hintButtonActionPerformed

    private void difficultyChooserActionPerformed(ActionEvent evt) {// GEN-FIRST:event_difficultyChooserActionPerformed
        JComboBox<?> comboBox = (JComboBox<?>) evt.getSource();
        this.difficulty = (int) comboBox.getSelectedIndex();
    }// GEN-LAST:event_difficultyChooserActionPerformed

    private void generationButtonActionPerformed(ActionEvent evt) {// GEN-FIRST:event_generationButtonActionPerformed
        this.game = new Game(this.difficulty);
        gameDisplayUpdate();
    }// GEN-LAST:event_generationButtonActionPerformed

    private void loadButtonActionPerformed(ActionEvent evt) {// GEN-FIRST:event_loadButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int choosen = chooser.showOpenDialog(this);
        if (choosen == JFileChooser.APPROVE_OPTION) {
            String name = chooser.getSelectedFile().getAbsolutePath();
            System.out.println("load file \"" + name + "\"");
            this.game = new Game(name);
            gameDisplayUpdate();
        }
    }// GEN-LAST:event_loadButtonActionPerformed

    private void saveButtonActionPerformed(ActionEvent evt) {// GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser chooser = new JFileChooser();
        int choosen = chooser.showOpenDialog(this);
        if (choosen == JFileChooser.APPROVE_OPTION) {
            String name = chooser.getSelectedFile().getAbsolutePath();
            System.out.println("save file \"" + name + "\"");
            this.game.save(name);
        }
    }// GEN-LAST:event_saveButtonActionPerformed

    private void canvasMouseClicked(MouseEvent evt) {// GEN-FIRST:event_canvasMouseClicked
        // Left click: select
        if (evt.getButton() == MouseEvent.BUTTON1) {
            if (selection == null)
                selection = new Vec2D((evt.getY() - offset.y) / imgScale.y + 1, (evt.getX() - offset.x) / imgScale.x + 1);
            else {
                Vec2D second = new Vec2D((evt.getY() - offset.y) / imgScale.y + 1, (evt.getX() - offset.x) / imgScale.x + 1);
                game.merge(selection, second);
                if (hint != null && ((hint[0].equals(selection) && hint[1].equals(second))
                        || (hint[0].equals(second) && hint[1].equals(selection)))) {
                    hint = null;
                }
                selection = null;
            }
        }
        // Right click: unselect
        else if (evt.getButton() == MouseEvent.BUTTON3)
            selection = null;
        // Update display
        gameDisplayUpdate();
    }// GEN-LAST:event_canvasMouseClicked

    private void revertButtonActionPerformed(ActionEvent evt) {// GEN-FIRST:event_revertButtonActionPerformed
        game.revert(1);
        gameDisplayUpdate();
    }// GEN-LAST:event_revertButtonActionPerformed

    private void cheatModeActionPerformed(ActionEvent evt) {// GEN-FIRST:event_cheatModeActionPerformed
        game.setCheatMode(cheatMode.isSelected());
    }// GEN-LAST:event_cheatModeActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JPanel canvas;
    private JCheckBox cheatMode;
    private JComboBox<String> difficultyChooser;
    private JPanel fileMenu;
    private JPanel gameMenu;
    private JButton generationButton;
    private JButton hintButton;
    private JLabel hintLabel;
    private JLabel jLabel2;
    private JSeparator jSeparator1;
    private JButton loadButton;
    private JTabbedPane menu;
    private JLabel menuLabel;
    private JButton revertButton;
    private JLabel revertLabel;
    private JButton saveButton;
    private JPanel startMenu;
    // End of variables declaration//GEN-END:variables
}
